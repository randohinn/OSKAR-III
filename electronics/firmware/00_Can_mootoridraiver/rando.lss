
rando.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000047  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000119  00000000  00000000  00000185  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000af  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000140  00000000  00000000  0000034d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000da  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000013  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <include/spi.h>


int main() {
	
	SPI_init();
  80:	0e 94 43 00 	call	0x86	; 0x86 <SPI_init>
  84:	ff cf       	rjmp	.-2      	; 0x84 <main+0x4>

00000086 <SPI_init>:
#include <include/spi.h>

void SPI_init() {
	DDRB |= (1 << DDB2) | (1 << DDB3) | (1 << DDB4) | (1 << DDB5);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	8c 63       	ori	r24, 0x3C	; 60
  8a:	84 b9       	out	0x04, r24	; 4
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  8c:	8c b5       	in	r24, 0x2c	; 44
  8e:	81 65       	ori	r24, 0x51	; 81
  90:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1 << PINB2);
  92:	2a 9a       	sbi	0x05, 2	; 5
}
  94:	08 95       	ret

00000096 <SPI_txrx>:

uint8_t SPI_txrx(uint8_t data) {
    PORTB &= ~(1 << PINB2);
  96:	2a 98       	cbi	0x05, 2	; 5
	SPDR = data;
  98:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));
  9a:	0d b4       	in	r0, 0x2d	; 45
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <SPI_txrx+0x4>
    PORTB |= (1 << PINB2);
  a0:	2a 9a       	sbi	0x05, 2	; 5
	return(SPDR);
  a2:	8e b5       	in	r24, 0x2e	; 46
  a4:	08 95       	ret

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
